{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\srija\\\\Desktop\\\\ir_project\\\\ir-frontend\\\\src\\\\components\\\\ImageList.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport ImageCard from '../components/ImageCard';\nimport { Row, Col } from 'reactstrap';\nimport axios from 'axios';\nimport { ImageContext } from './ImageModal';\nimport { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ImageList(_ref) {\n  _s();\n  let {\n    image\n  } = _ref;\n  const getImages = async image => {\n    const params = {\n      path: \"C:\\\\Users\\\\srija\\\\Desktop\\\\\" + image\n    };\n    let images;\n    if (image == null) {\n      await axios.get('http://127.0.0.1:5000/shuffle').then(response => {\n        console.log('Data received:', response.data);\n        images = response.data.images;\n        // setImages(response.data.images)\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n      let chunk_images = [];\n      let chunkSize = 8;\n      for (let i = 0; i < ((_images = images) === null || _images === void 0 ? void 0 : _images.slice(0, 100).length); i += chunkSize) {\n        var _images;\n        const chunk = images.slice(i, i + chunkSize);\n        chunk_images.push(chunk);\n      }\n      console.log(chunk_images);\n      setImages(chunk_images);\n    } else {\n      const params = {\n        path: image\n      };\n      await axios.get('http://127.0.0.1:5000/uploadSearch', {\n        params\n      }).then(response => {\n        console.log('Data received:', response.data);\n        images = response.data.images;\n        // setImages(response.data.images)\n      }).catch(error => {\n        console.error('Error fetching data:', error);\n      });\n      let chunk_images = [];\n      let chunkSize = 8;\n      for (let i = 0; i < ((_images2 = images) === null || _images2 === void 0 ? void 0 : _images2.slice(0, 100).length); i += chunkSize) {\n        var _images2;\n        const chunk = images.slice(i, i + chunkSize);\n        chunk_images.push(chunk);\n      }\n      console.log(chunk_images);\n      setImages(chunk_images);\n    }\n  };\n  const [images, setImages] = useState([]);\n  // const [chunkimages, setChunkimages]=useState([])\n\n  // this.getImages()\n  // console.log(\"hi\",this.state.images)\n  // var image=this.state.image\n\n  useEffect(() => {\n    getImages(image);\n  }, [image]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(ImageCard, {\n        src: \"GPR_dataset\\\\\" + image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: images.map((chunk_image, index1) => /*#__PURE__*/_jsxDEV(Row, {\n        xs: \"8\",\n        style: {\n          \"padding\": \"0% 0%\",\n          \"margin\": \"0% 5%\"\n        },\n        children: chunk_image.map((image, index) => {\n          // console.log(\"..\\\\GPR_dataset\\\\\"+image)\n          return /*#__PURE__*/_jsxDEV(Col, {\n            style: {\n              \"margin\": \"1% 1%\",\n              \"padding\": \"0.0%\"\n            },\n            children: /*#__PURE__*/_jsxDEV(ImageCard, {\n              src: \"GPR_dataset\\\\\" + image\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }, this);\n        })\n      }, index1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n}\n_s(ImageList, \"ScKwoilS3xNJP1q5r1COmrAdDIM=\");\n_c = ImageList;\nexport default ImageList;\nvar _c;\n$RefreshReg$(_c, \"ImageList\");","map":{"version":3,"names":["React","useState","ImageCard","Row","Col","axios","ImageContext","useEffect","jsxDEV","_jsxDEV","ImageList","_ref","_s","image","getImages","params","path","images","get","then","response","console","log","data","catch","error","chunk_images","chunkSize","i","_images","slice","length","chunk","push","setImages","_images2","children","src","fileName","_jsxFileName","lineNumber","columnNumber","map","chunk_image","index1","xs","style","index","_c","$RefreshReg$"],"sources":["C:/Users/srija/Desktop/ir_project/ir-frontend/src/components/ImageList.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport ImageCard from '../components/ImageCard';\r\nimport {Row, Col} from 'reactstrap'\r\nimport axios from 'axios'\r\nimport { ImageContext } from './ImageModal';\r\nimport { useEffect } from 'react';\r\n\r\n \r\n\r\n\r\n\r\nfunction ImageList({image}){\r\n\r\n    const getImages=async(image)=>{\r\n        const params={\r\n            path: \"C:\\\\Users\\\\srija\\\\Desktop\\\\\"+image\r\n        }\r\n        let images\r\n        if(image==null){\r\n            await axios.get('http://127.0.0.1:5000/shuffle').then(response => {\r\n                console.log('Data received:', response.data);\r\n                images=response.data.images\r\n                // setImages(response.data.images)\r\n                })\r\n                .catch(error => {\r\n                console.error('Error fetching data:', error);\r\n                });\r\n            let chunk_images=[]\r\n            let chunkSize=8\r\n            for (let i = 0; i < images?.slice(0,100).length; i += chunkSize) {\r\n                const chunk = images.slice(i, i + chunkSize);\r\n                chunk_images.push(chunk)\r\n            }\r\n            console.log(chunk_images)\r\n            setImages(chunk_images)\r\n        }\r\n        else{\r\n            const params={\r\n                path:image\r\n            }\r\n            await axios.get('http://127.0.0.1:5000/uploadSearch', {params}).then(response => {\r\n                console.log('Data received:', response.data);\r\n                images=response.data.images\r\n                // setImages(response.data.images)\r\n                })\r\n                .catch(error => {\r\n                console.error('Error fetching data:', error);\r\n                });\r\n            let chunk_images=[]\r\n            let chunkSize=8\r\n            for (let i = 0; i < images?.slice(0,100).length; i += chunkSize) {\r\n                const chunk = images.slice(i, i + chunkSize);\r\n                chunk_images.push(chunk)\r\n            }\r\n            console.log(chunk_images)\r\n            setImages(chunk_images)\r\n        }\r\n    \r\n    }\r\n\r\n    const [images, setImages]=useState([])\r\n    // const [chunkimages, setChunkimages]=useState([])\r\n\r\n    // this.getImages()\r\n    // console.log(\"hi\",this.state.images)\r\n    // var image=this.state.image\r\n    \r\n    \r\n\r\n    useEffect(()=>{\r\n        getImages(image)\r\n    },[image])\r\n\r\n    return(\r\n        <div>\r\n        <div>\r\n            <ImageCard src={\"GPR_dataset\\\\\"+image}></ImageCard>\r\n        </div>\r\n        <div>\r\n            {images.map((chunk_image, index1) => (\r\n                <Row xs=\"8\" key={index1} style={{\"padding\":\"0% 0%\", \"margin\":\"0% 5%\"}}>\r\n                {chunk_image.map((image, index )=> {\r\n                    // console.log(\"..\\\\GPR_dataset\\\\\"+image)\r\n                    return (\r\n                    <Col style={{\"margin\":\"1% 1%\", \"padding\":\"0.0%\"}}>\r\n                    <ImageCard src={\"GPR_dataset\\\\\"+image}></ImageCard>\r\n                    </Col>\r\n                )})}\r\n                </Row>\r\n            ))}\r\n        </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\nexport default ImageList"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}